// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GameMessage {

namespace {

const ::google::protobuf::Descriptor* DiceMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiceMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyUserLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyUserLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyUserLoginRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyUserLoginRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LobbyUserLoginRet_LoginRet_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LobbyHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* LobbyEnterGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LobbyEnterGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserChatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserChatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserChatRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserChatRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserChatMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserChatMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableList_SicBoTableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableList_SicBoTableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoSitIntoTableReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoSitIntoTableReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoSitIntoTableRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoSitIntoTableRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SicBoSitIntoTableRes_SicBoSitTableResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SicBoBetAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoBetAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoBetResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoBetResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SicBoBetResult_BetResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableStatus_SicBoBetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableStatus_SicBoBetInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SicBoTableStatus_SicBoTableState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SicBoWinLoseRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoWinLoseRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoWinLoseRes_WinLoseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoWinLoseRes_WinLoseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoGetTableHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoGetTableHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableHistoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableHistoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SicBoTableHistoryInfo_SicBoHistoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxStartGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxStartGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxChangeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxChangeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxExitTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxExitTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxChoiceGameMultiple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxChoiceGameMultiple_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxGameStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxGameStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxGameStatus_OxGamePlayerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxGameStatus_OxGamePlayerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OxGameStatus_DiceNumber_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OxGameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxGameResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OxGameResult_OxGamePlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OxGameResult_OxGamePlayerResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OxGameResult_OxType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SicBoBetPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OxGameMultiple_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameMessage_2eproto() {
  protobuf_AddDesc_GameMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameMessage.proto");
  GOOGLE_CHECK(file != NULL);
  DiceMessage_descriptor_ = file->message_type(0);
  static const int DiceMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, msgsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, msgdata_),
  };
  DiceMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiceMessage_descriptor_,
      DiceMessage::default_instance_,
      DiceMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiceMessage));
  LobbyUserLoginReq_descriptor_ = file->message_type(1);
  static const int LobbyUserLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginReq, password_),
  };
  LobbyUserLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LobbyUserLoginReq_descriptor_,
      LobbyUserLoginReq::default_instance_,
      LobbyUserLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LobbyUserLoginReq));
  LobbyUserLoginRet_descriptor_ = file->message_type(2);
  static const int LobbyUserLoginRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginRet, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginRet, result_),
  };
  LobbyUserLoginRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LobbyUserLoginRet_descriptor_,
      LobbyUserLoginRet::default_instance_,
      LobbyUserLoginRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyUserLoginRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LobbyUserLoginRet));
  LobbyUserLoginRet_LoginRet_descriptor_ = LobbyUserLoginRet_descriptor_->enum_type(0);
  LobbyHeartBeat_descriptor_ = file->message_type(3);
  static const int LobbyHeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyHeartBeat, userid_),
  };
  LobbyHeartBeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LobbyHeartBeat_descriptor_,
      LobbyHeartBeat::default_instance_,
      LobbyHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyHeartBeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyHeartBeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LobbyHeartBeat));
  LobbyEnterGame_descriptor_ = file->message_type(4);
  static const int LobbyEnterGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyEnterGame, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyEnterGame, type_),
  };
  LobbyEnterGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LobbyEnterGame_descriptor_,
      LobbyEnterGame::default_instance_,
      LobbyEnterGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyEnterGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LobbyEnterGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LobbyEnterGame));
  UserChatReq_descriptor_ = file->message_type(5);
  static const int UserChatReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatReq, chatmsg_),
  };
  UserChatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserChatReq_descriptor_,
      UserChatReq::default_instance_,
      UserChatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserChatReq));
  UserChatRet_descriptor_ = file->message_type(6);
  static const int UserChatRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatRet, ret_),
  };
  UserChatRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserChatRet_descriptor_,
      UserChatRet::default_instance_,
      UserChatRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserChatRet));
  UserChatMsg_descriptor_ = file->message_type(7);
  static const int UserChatMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatMsg, chatmsg_),
  };
  UserChatMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserChatMsg_descriptor_,
      UserChatMsg::default_instance_,
      UserChatMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChatMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserChatMsg));
  SicBoTableList_descriptor_ = file->message_type(8);
  static const int SicBoTableList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList, tableinfo_),
  };
  SicBoTableList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoTableList_descriptor_,
      SicBoTableList::default_instance_,
      SicBoTableList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoTableList));
  SicBoTableList_SicBoTableInfo_descriptor_ = SicBoTableList_descriptor_->nested_type(0);
  static const int SicBoTableList_SicBoTableInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, tablemaxplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, tableenterplayer_),
  };
  SicBoTableList_SicBoTableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoTableList_SicBoTableInfo_descriptor_,
      SicBoTableList_SicBoTableInfo::default_instance_,
      SicBoTableList_SicBoTableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableList_SicBoTableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoTableList_SicBoTableInfo));
  SicBoSitIntoTableReq_descriptor_ = file->message_type(9);
  static const int SicBoSitIntoTableReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableReq, tableid_),
  };
  SicBoSitIntoTableReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoSitIntoTableReq_descriptor_,
      SicBoSitIntoTableReq::default_instance_,
      SicBoSitIntoTableReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoSitIntoTableReq));
  SicBoSitIntoTableRes_descriptor_ = file->message_type(10);
  static const int SicBoSitIntoTableRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableRes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableRes, result_),
  };
  SicBoSitIntoTableRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoSitIntoTableRes_descriptor_,
      SicBoSitIntoTableRes::default_instance_,
      SicBoSitIntoTableRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoSitIntoTableRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoSitIntoTableRes));
  SicBoSitIntoTableRes_SicBoSitTableResult_descriptor_ = SicBoSitIntoTableRes_descriptor_->enum_type(0);
  SicBoBetAction_descriptor_ = file->message_type(11);
  static const int SicBoBetAction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, betnumber_),
  };
  SicBoBetAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoBetAction_descriptor_,
      SicBoBetAction::default_instance_,
      SicBoBetAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoBetAction));
  SicBoBetResult_descriptor_ = file->message_type(12);
  static const int SicBoBetResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetResult, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetResult, result_),
  };
  SicBoBetResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoBetResult_descriptor_,
      SicBoBetResult::default_instance_,
      SicBoBetResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoBetResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoBetResult));
  SicBoBetResult_BetResult_descriptor_ = SicBoBetResult_descriptor_->enum_type(0);
  SicBoTableRefresh_descriptor_ = file->message_type(13);
  static const int SicBoTableRefresh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableRefresh, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableRefresh, tableid_),
  };
  SicBoTableRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoTableRefresh_descriptor_,
      SicBoTableRefresh::default_instance_,
      SicBoTableRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoTableRefresh));
  SicBoTableStatus_descriptor_ = file->message_type(14);
  static const int SicBoTableStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, roundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, restseonds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, betinfo_),
  };
  SicBoTableStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoTableStatus_descriptor_,
      SicBoTableStatus::default_instance_,
      SicBoTableStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoTableStatus));
  SicBoTableStatus_SicBoBetInfo_descriptor_ = SicBoTableStatus_descriptor_->nested_type(0);
  static const int SicBoTableStatus_SicBoBetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus_SicBoBetInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus_SicBoBetInfo, money_),
  };
  SicBoTableStatus_SicBoBetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoTableStatus_SicBoBetInfo_descriptor_,
      SicBoTableStatus_SicBoBetInfo::default_instance_,
      SicBoTableStatus_SicBoBetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus_SicBoBetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableStatus_SicBoBetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoTableStatus_SicBoBetInfo));
  SicBoTableStatus_SicBoTableState_descriptor_ = SicBoTableStatus_descriptor_->enum_type(0);
  SicBoWinLoseRes_descriptor_ = file->message_type(15);
  static const int SicBoWinLoseRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, dicenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, wininfo_),
  };
  SicBoWinLoseRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoWinLoseRes_descriptor_,
      SicBoWinLoseRes::default_instance_,
      SicBoWinLoseRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoWinLoseRes));
  SicBoWinLoseRes_WinLoseInfo_descriptor_ = SicBoWinLoseRes_descriptor_->nested_type(0);
  static const int SicBoWinLoseRes_WinLoseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, betmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, winmoney_),
  };
  SicBoWinLoseRes_WinLoseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoWinLoseRes_WinLoseInfo_descriptor_,
      SicBoWinLoseRes_WinLoseInfo::default_instance_,
      SicBoWinLoseRes_WinLoseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoWinLoseRes_WinLoseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoWinLoseRes_WinLoseInfo));
  SicBoGetTableHistory_descriptor_ = file->message_type(16);
  static const int SicBoGetTableHistory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoGetTableHistory, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoGetTableHistory, tableid_),
  };
  SicBoGetTableHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoGetTableHistory_descriptor_,
      SicBoGetTableHistory::default_instance_,
      SicBoGetTableHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoGetTableHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoGetTableHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoGetTableHistory));
  SicBoTableHistoryInfo_descriptor_ = file->message_type(17);
  static const int SicBoTableHistoryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo, historyinfo_),
  };
  SicBoTableHistoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoTableHistoryInfo_descriptor_,
      SicBoTableHistoryInfo::default_instance_,
      SicBoTableHistoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoTableHistoryInfo));
  SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_ = SicBoTableHistoryInfo_descriptor_->nested_type(0);
  static const int SicBoTableHistoryInfo_SicBoHistoryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo_SicBoHistoryInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo_SicBoHistoryInfo, dicenumber_),
  };
  SicBoTableHistoryInfo_SicBoHistoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_,
      SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_,
      SicBoTableHistoryInfo_SicBoHistoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo_SicBoHistoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SicBoTableHistoryInfo_SicBoHistoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SicBoTableHistoryInfo_SicBoHistoryInfo));
  OxStartGame_descriptor_ = file->message_type(18);
  static const int OxStartGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxStartGame, userid_),
  };
  OxStartGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OxStartGame_descriptor_,
      OxStartGame::default_instance_,
      OxStartGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxStartGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxStartGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OxStartGame));
  OxChangeTable_descriptor_ = file->message_type(19);
  static const int OxChangeTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChangeTable, userid_),
  };
  OxChangeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OxChangeTable_descriptor_,
      OxChangeTable::default_instance_,
      OxChangeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChangeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChangeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OxChangeTable));
  OxExitTable_descriptor_ = file->message_type(20);
  static const int OxExitTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxExitTable, userid_),
  };
  OxExitTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OxExitTable_descriptor_,
      OxExitTable::default_instance_,
      OxExitTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxExitTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxExitTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OxExitTable));
  OxChoiceGameMultiple_descriptor_ = file->message_type(21);
  static const int OxChoiceGameMultiple_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChoiceGameMultiple, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChoiceGameMultiple, multiple_),
  };
  OxChoiceGameMultiple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OxChoiceGameMultiple_descriptor_,
      OxChoiceGameMultiple::default_instance_,
      OxChoiceGameMultiple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChoiceGameMultiple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxChoiceGameMultiple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OxChoiceGameMultiple));
  OxGameStatus_descriptor_ = file->message_type(22);
  static const int OxGameStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus, status_),
  };
  OxGameStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OxGameStatus_descriptor_,
      OxGameStatus::default_instance_,
      OxGameStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OxGameStatus));
  OxGameStatus_OxGamePlayerStatus_descriptor_ = OxGameStatus_descriptor_->nested_type(0);
  static const int OxGameStatus_OxGamePlayerStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, seatposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, gamecoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, dice_),
  };
  OxGameStatus_OxGamePlayerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OxGameStatus_OxGamePlayerStatus_descriptor_,
      OxGameStatus_OxGamePlayerStatus::default_instance_,
      OxGameStatus_OxGamePlayerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameStatus_OxGamePlayerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OxGameStatus_OxGamePlayerStatus));
  OxGameStatus_DiceNumber_descriptor_ = OxGameStatus_descriptor_->enum_type(0);
  OxGameResult_descriptor_ = file->message_type(23);
  static const int OxGameResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult, result_),
  };
  OxGameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OxGameResult_descriptor_,
      OxGameResult::default_instance_,
      OxGameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OxGameResult));
  OxGameResult_OxGamePlayerResult_descriptor_ = OxGameResult_descriptor_->nested_type(0);
  static const int OxGameResult_OxGamePlayerResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, dicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, winresult_),
  };
  OxGameResult_OxGamePlayerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OxGameResult_OxGamePlayerResult_descriptor_,
      OxGameResult_OxGamePlayerResult::default_instance_,
      OxGameResult_OxGamePlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OxGameResult_OxGamePlayerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OxGameResult_OxGamePlayerResult));
  OxGameResult_OxType_descriptor_ = OxGameResult_descriptor_->enum_type(0);
  MsgType_descriptor_ = file->enum_type(0);
  GameType_descriptor_ = file->enum_type(1);
  SicBoBetPosition_descriptor_ = file->enum_type(2);
  OxGameMultiple_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiceMessage_descriptor_, &DiceMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LobbyUserLoginReq_descriptor_, &LobbyUserLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LobbyUserLoginRet_descriptor_, &LobbyUserLoginRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LobbyHeartBeat_descriptor_, &LobbyHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LobbyEnterGame_descriptor_, &LobbyEnterGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserChatReq_descriptor_, &UserChatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserChatRet_descriptor_, &UserChatRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserChatMsg_descriptor_, &UserChatMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoTableList_descriptor_, &SicBoTableList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoTableList_SicBoTableInfo_descriptor_, &SicBoTableList_SicBoTableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoSitIntoTableReq_descriptor_, &SicBoSitIntoTableReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoSitIntoTableRes_descriptor_, &SicBoSitIntoTableRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoBetAction_descriptor_, &SicBoBetAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoBetResult_descriptor_, &SicBoBetResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoTableRefresh_descriptor_, &SicBoTableRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoTableStatus_descriptor_, &SicBoTableStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoTableStatus_SicBoBetInfo_descriptor_, &SicBoTableStatus_SicBoBetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoWinLoseRes_descriptor_, &SicBoWinLoseRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoWinLoseRes_WinLoseInfo_descriptor_, &SicBoWinLoseRes_WinLoseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoGetTableHistory_descriptor_, &SicBoGetTableHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoTableHistoryInfo_descriptor_, &SicBoTableHistoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_, &SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OxStartGame_descriptor_, &OxStartGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OxChangeTable_descriptor_, &OxChangeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OxExitTable_descriptor_, &OxExitTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OxChoiceGameMultiple_descriptor_, &OxChoiceGameMultiple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OxGameStatus_descriptor_, &OxGameStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OxGameStatus_OxGamePlayerStatus_descriptor_, &OxGameStatus_OxGamePlayerStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OxGameResult_descriptor_, &OxGameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OxGameResult_OxGamePlayerResult_descriptor_, &OxGameResult_OxGamePlayerResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameMessage_2eproto() {
  delete DiceMessage::default_instance_;
  delete DiceMessage_reflection_;
  delete LobbyUserLoginReq::default_instance_;
  delete LobbyUserLoginReq_reflection_;
  delete LobbyUserLoginRet::default_instance_;
  delete LobbyUserLoginRet_reflection_;
  delete LobbyHeartBeat::default_instance_;
  delete LobbyHeartBeat_reflection_;
  delete LobbyEnterGame::default_instance_;
  delete LobbyEnterGame_reflection_;
  delete UserChatReq::default_instance_;
  delete UserChatReq_reflection_;
  delete UserChatRet::default_instance_;
  delete UserChatRet_reflection_;
  delete UserChatMsg::default_instance_;
  delete UserChatMsg_reflection_;
  delete SicBoTableList::default_instance_;
  delete SicBoTableList_reflection_;
  delete SicBoTableList_SicBoTableInfo::default_instance_;
  delete SicBoTableList_SicBoTableInfo_reflection_;
  delete SicBoSitIntoTableReq::default_instance_;
  delete SicBoSitIntoTableReq_reflection_;
  delete SicBoSitIntoTableRes::default_instance_;
  delete SicBoSitIntoTableRes_reflection_;
  delete SicBoBetAction::default_instance_;
  delete SicBoBetAction_reflection_;
  delete SicBoBetResult::default_instance_;
  delete SicBoBetResult_reflection_;
  delete SicBoTableRefresh::default_instance_;
  delete SicBoTableRefresh_reflection_;
  delete SicBoTableStatus::default_instance_;
  delete SicBoTableStatus_reflection_;
  delete SicBoTableStatus_SicBoBetInfo::default_instance_;
  delete SicBoTableStatus_SicBoBetInfo_reflection_;
  delete SicBoWinLoseRes::default_instance_;
  delete SicBoWinLoseRes_reflection_;
  delete SicBoWinLoseRes_WinLoseInfo::default_instance_;
  delete SicBoWinLoseRes_WinLoseInfo_reflection_;
  delete SicBoGetTableHistory::default_instance_;
  delete SicBoGetTableHistory_reflection_;
  delete SicBoTableHistoryInfo::default_instance_;
  delete SicBoTableHistoryInfo_reflection_;
  delete SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_;
  delete SicBoTableHistoryInfo_SicBoHistoryInfo_reflection_;
  delete OxStartGame::default_instance_;
  delete OxStartGame_reflection_;
  delete OxChangeTable::default_instance_;
  delete OxChangeTable_reflection_;
  delete OxExitTable::default_instance_;
  delete OxExitTable_reflection_;
  delete OxChoiceGameMultiple::default_instance_;
  delete OxChoiceGameMultiple_reflection_;
  delete OxGameStatus::default_instance_;
  delete OxGameStatus_reflection_;
  delete OxGameStatus_OxGamePlayerStatus::default_instance_;
  delete OxGameStatus_OxGamePlayerStatus_reflection_;
  delete OxGameResult::default_instance_;
  delete OxGameResult_reflection_;
  delete OxGameResult_OxGamePlayerResult::default_instance_;
  delete OxGameResult_OxGamePlayerResult_reflection_;
}

void protobuf_AddDesc_GameMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GameMessage.proto\022\013GameMessage\"=\n\013Dice"
    "Message\022\014\n\004type\030\001 \002(\005\022\017\n\007msgsize\030\002 \002(\005\022\017"
    "\n\007msgdata\030\003 \002(\014\"5\n\021LobbyUserLoginReq\022\016\n\006"
    "userId\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\"\231\001\n\021Lobby"
    "UserLoginRet\022\016\n\006userId\030\001 \002(\t\0227\n\006result\030\002"
    " \002(\0162\'.GameMessage.LobbyUserLoginRet.Log"
    "inRet\";\n\010LoginRet\022\030\n\024LOGIN_RESULT_SUCCES"
    "S\020\001\022\025\n\021LOGIN_RESULT_FAIL\020\002\" \n\016LobbyHeart"
    "Beat\022\016\n\006userId\030\001 \002(\t\"E\n\016LobbyEnterGame\022\016"
    "\n\006userId\030\001 \002(\t\022#\n\004type\030\002 \002(\0162\025.GameMessa"
    "ge.GameType\".\n\013UserChatReq\022\016\n\006userId\030\001 \002"
    "(\t\022\017\n\007chatmsg\030\002 \002(\t\"\032\n\013UserChatRet\022\013\n\003re"
    "t\030\001 \002(\005\".\n\013UserChatMsg\022\016\n\006userId\030\001 \002(\t\022\017"
    "\n\007chatmsg\030\002 \002(\t\"\267\001\n\016SicBoTableList\022=\n\tta"
    "bleInfo\030\001 \003(\0132*.GameMessage.SicBoTableLi"
    "st.SicBoTableInfo\032f\n\016SicBoTableInfo\022\017\n\007t"
    "ableId\030\001 \002(\005\022\021\n\ttableName\030\002 \002(\t\022\026\n\016table"
    "MaxPlayer\030\003 \002(\005\022\030\n\020tableEnterPlayer\030\004 \002("
    "\005\"7\n\024SicBoSitIntoTableReq\022\016\n\006userId\030\001 \002("
    "\t\022\017\n\007tableId\030\002 \002(\005\"\365\001\n\024SicBoSitIntoTable"
    "Res\022\016\n\006userId\030\001 \002(\t\022E\n\006result\030\002 \002(\01625.Ga"
    "meMessage.SicBoSitIntoTableRes.SicBoSitT"
    "ableResult\"\205\001\n\023SicBoSitTableResult\022\033\n\027SI"
    "CBO_SIT_TABLE_SUCCESS\020\001\022\030\n\024SICBO_SIT_TAB"
    "LE_FULL\020\002\022\034\n\030SICBO_SIT_TABLE_NO_TABLE\020\003\022"
    "\031\n\025SICBO_SIT_TABLE_OTHER\020\004\"u\n\016SicBoBetAc"
    "tion\022\016\n\006userId\030\001 \002(\t\022\017\n\007tableId\030\002 \002(\005\022/\n"
    "\010position\030\003 \002(\0162\035.GameMessage.SicBoBetPo"
    "sition\022\021\n\tbetNumber\030\004 \002(\005\"\333\001\n\016SicBoBetRe"
    "sult\022\016\n\006userId\030\001 \002(\t\0225\n\006result\030\002 \002(\0162%.G"
    "ameMessage.SicBoBetResult.BetResult\"\201\001\n\t"
    "BetResult\022\025\n\021SICBO_BET_SUCCESS\020\001\022\035\n\031SICB"
    "O_BET_NO_ENOUGH_MONEY\020\002\022\037\n\033SICBO_BET_NOT"
    "_IN_THIS_TABLE\020\003\022\035\n\031SICBO_BET_NOT_IN_BET"
    "_TIME\020\004\"4\n\021SicBoTableRefresh\022\016\n\006userId\030\001"
    " \002(\t\022\017\n\007tableId\030\002 \002(\005\"\337\002\n\020SicBoTableStat"
    "us\022\017\n\007tableId\030\001 \002(\005\022\017\n\007roundId\030\002 \002(\005\022<\n\005"
    "state\030\003 \002(\0162-.GameMessage.SicBoTableStat"
    "us.SicBoTableState\022\022\n\nrestSeonds\030\004 \002(\005\022;"
    "\n\007betInfo\030\005 \003(\0132*.GameMessage.SicBoTable"
    "Status.SicBoBetInfo\032N\n\014SicBoBetInfo\022/\n\010p"
    "osition\030\001 \002(\0162\035.GameMessage.SicBoBetPosi"
    "tion\022\r\n\005money\030\002 \002(\005\"J\n\017SicBoTableState\022\031"
    "\n\025SICBO_TABLE_STATE_BET\020\001\022\034\n\030SICBO_TABLE"
    "_STATE_RESULT\020\002\"\324\001\n\017SicBoWinLoseRes\022\016\n\006u"
    "serId\030\001 \002(\t\022\022\n\ndiceNumber\030\002 \003(\005\0229\n\007winIn"
    "fo\030\003 \003(\0132(.GameMessage.SicBoWinLoseRes.W"
    "inLoseInfo\032b\n\013WinLoseInfo\022/\n\010position\030\001 "
    "\002(\0162\035.GameMessage.SicBoBetPosition\022\020\n\010be"
    "tMoney\030\002 \002(\005\022\020\n\010winMoney\030\003 \002(\005\"7\n\024SicBoG"
    "etTableHistory\022\016\n\006userId\030\001 \002(\t\022\017\n\007tableI"
    "d\030\002 \002(\005\"\252\001\n\025SicBoTableHistoryInfo\022\017\n\007tab"
    "leId\030\001 \002(\005\022H\n\013historyInfo\030\002 \003(\01323.GameMe"
    "ssage.SicBoTableHistoryInfo.SicBoHistory"
    "Info\0326\n\020SicBoHistoryInfo\022\016\n\006gameId\030\001 \002(\005"
    "\022\022\n\ndiceNumber\030\002 \003(\005\"\035\n\013OxStartGame\022\016\n\006u"
    "serId\030\001 \002(\t\"\037\n\rOxChangeTable\022\016\n\006userId\030\001"
    " \002(\t\"\035\n\013OxExitTable\022\016\n\006userId\030\001 \002(\t\"U\n\024O"
    "xChoiceGameMultiple\022\016\n\006userId\030\001 \002(\t\022-\n\010m"
    "ultiple\030\002 \002(\0162\033.GameMessage.OxGameMultip"
    "le\"\264\003\n\014OxGameStatus\022\016\n\006userId\030\001 \002(\t\022<\n\006s"
    "tatus\030\002 \003(\0132,.GameMessage.OxGameStatus.O"
    "xGamePlayerStatus\032\262\001\n\022OxGamePlayerStatus"
    "\022\020\n\010userName\030\001 \002(\t\022\024\n\014seatPosition\030\002 \002(\005"
    "\022\021\n\tgameCoins\030\003 \002(\005\022-\n\010multiple\030\004 \001(\0162\033."
    "GameMessage.OxGameMultiple\0222\n\004dice\030\005 \003(\016"
    "2$.GameMessage.OxGameStatus.DiceNumber\"\240"
    "\001\n\nDiceNumber\022\023\n\017DICE_NUMBER_ONE\020\001\022\023\n\017DI"
    "CE_NUMBER_TWO\020\002\022\025\n\021DICE_NUMBER_THREE\020\003\022\024"
    "\n\020DICE_NUMBER_FOUR\020\004\022\024\n\020DICE_NUMBER_FIVE"
    "\020\005\022\023\n\017DICE_NUMBER_SIX\020\006\022\020\n\014DICE_NO_DICE\020"
    "\007\"\236\003\n\014OxGameResult\022\016\n\006userId\030\001 \002(\t\022<\n\006re"
    "sult\030\002 \003(\0132,.GameMessage.OxGameResult.Ox"
    "GamePlayerResult\032m\n\022OxGamePlayerResult\022\020"
    "\n\010userName\030\001 \002(\t\0222\n\010diceType\030\002 \002(\0162 .Gam"
    "eMessage.OxGameResult.OxType\022\021\n\twinResul"
    "t\030\003 \002(\005\"\320\001\n\006OxType\022\021\n\rOX_TYPE_NO_OX\020\001\022\020\n"
    "\014OX_TYPE_OX_1\020\002\022\020\n\014OX_TYPE_OX_2\020\003\022\020\n\014OX_"
    "TYPE_OX_3\020\004\022\020\n\014OX_TYPE_OX_4\020\005\022\020\n\014OX_TYPE"
    "_OX_5\020\006\022\020\n\014OX_TYPE_OX_6\020\007\022\020\n\014OX_TYPE_OX_"
    "7\020\010\022\020\n\014OX_TYPE_OX_8\020\t\022\020\n\014OX_TYPE_OX_9\020\n\022"
    "\021\n\rOX_TYPE_OX_OX\020\013*\335\003\n\007MsgType\022\030\n\024MG_Lob"
    "byUserLoginReq\020\001\022\030\n\024MG_LobbyUserLoginRet"
    "\020\002\022\025\n\021MG_LobbyHeartBeat\020\003\022\025\n\021MG_LobbyEnt"
    "erGame\020\004\022\026\n\022MG_SicTableListRes\020\005\022\031\n\025MG_S"
    "icSitIntoTableReq\020\006\022\031\n\025MG_SicSitIntoTabl"
    "eRes\020\007\022\023\n\017MG_SicBetAction\020\010\022\023\n\017MG_SicBet"
    "Result\020\t\022\031\n\025MG_SicRefreshTableReq\020\n\022\025\n\021M"
    "G_SicTableStatus\020\013\022\027\n\023MG_SicWinLoseResul"
    "t\020\014\022\023\n\017MG_SicGetHisReq\020\r\022\023\n\017MG_SicGetHis"
    "Res\020\016\022\022\n\016MG_OxStartGame\020\017\022\024\n\020MG_OxChange"
    "Table\020\020\022\022\n\016MG_OxExitTable\020\021\022\033\n\027MG_OxChoi"
    "ceGameMultiple\020\022\022\023\n\017MG_OxGameStatus\020\023\022\023\n"
    "\017MG_OxGameResult\020\024*/\n\010GameType\022\020\n\014GAME_T"
    "YPE_OX\020\001\022\021\n\rGAME_TYPE_SIC\020\002*\300\005\n\020SicBoBet"
    "Position\022\021\n\rSICBO_BET_BIG\020\001\022\023\n\017SICBO_BET"
    "_SMALL\020\002\022\030\n\024SICBO_BET_TRIPLE_ANY\020\003\022\026\n\022SI"
    "CBO_BET_TRIPLE_1\020\004\022\026\n\022SICBO_BET_TRIPLE_2"
    "\020\005\022\026\n\022SICBO_BET_TRIPLE_3\020\006\022\026\n\022SICBO_BET_"
    "TRIPLE_4\020\007\022\026\n\022SICBO_BET_TRIPLE_5\020\010\022\026\n\022SI"
    "CBO_BET_TRIPLE_6\020\t\022\026\n\022SICBO_BET_NUMBER_4"
    "\020\n\022\026\n\022SICBO_BET_NUMBER_5\020\013\022\026\n\022SICBO_BET_"
    "NUMBER_6\020\014\022\026\n\022SICBO_BET_NUMBER_7\020\r\022\026\n\022SI"
    "CBO_BET_NUMBER_8\020\016\022\026\n\022SICBO_BET_NUMBER_9"
    "\020\017\022\027\n\023SICBO_BET_NUMBER_10\020\020\022\027\n\023SICBO_BET"
    "_NUMBER_11\020\021\022\027\n\023SICBO_BET_NUMBER_12\020\022\022\027\n"
    "\023SICBO_BET_NUMBER_13\020\023\022\027\n\023SICBO_BET_NUMB"
    "ER_14\020\024\022\027\n\023SICBO_BET_NUMBER_15\020\025\022\027\n\023SICB"
    "O_BET_NUMBER_16\020\026\022\027\n\023SICBO_BET_NUMBER_17"
    "\020\027\022\024\n\020SICBO_BET_DICE_1\020\030\022\024\n\020SICBO_BET_DI"
    "CE_2\020\031\022\024\n\020SICBO_BET_DICE_3\020\032\022\024\n\020SICBO_BE"
    "T_DICE_4\020\033\022\024\n\020SICBO_BET_DICE_5\020\034\022\024\n\020SICB"
    "O_BET_DICE_6\020\035*u\n\016OxGameMultiple\022\027\n\023OX_G"
    "AME_MULTIPLE_1X\020\001\022\027\n\023OX_GAME_MULTIPLE_3X"
    "\020\002\022\027\n\023OX_GAME_MULTIPLE_5X\020\003\022\030\n\024OX_GAME_M"
    "ULTIPLE_10X\020\004", 4613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameMessage.proto", &protobuf_RegisterTypes);
  DiceMessage::default_instance_ = new DiceMessage();
  LobbyUserLoginReq::default_instance_ = new LobbyUserLoginReq();
  LobbyUserLoginRet::default_instance_ = new LobbyUserLoginRet();
  LobbyHeartBeat::default_instance_ = new LobbyHeartBeat();
  LobbyEnterGame::default_instance_ = new LobbyEnterGame();
  UserChatReq::default_instance_ = new UserChatReq();
  UserChatRet::default_instance_ = new UserChatRet();
  UserChatMsg::default_instance_ = new UserChatMsg();
  SicBoTableList::default_instance_ = new SicBoTableList();
  SicBoTableList_SicBoTableInfo::default_instance_ = new SicBoTableList_SicBoTableInfo();
  SicBoSitIntoTableReq::default_instance_ = new SicBoSitIntoTableReq();
  SicBoSitIntoTableRes::default_instance_ = new SicBoSitIntoTableRes();
  SicBoBetAction::default_instance_ = new SicBoBetAction();
  SicBoBetResult::default_instance_ = new SicBoBetResult();
  SicBoTableRefresh::default_instance_ = new SicBoTableRefresh();
  SicBoTableStatus::default_instance_ = new SicBoTableStatus();
  SicBoTableStatus_SicBoBetInfo::default_instance_ = new SicBoTableStatus_SicBoBetInfo();
  SicBoWinLoseRes::default_instance_ = new SicBoWinLoseRes();
  SicBoWinLoseRes_WinLoseInfo::default_instance_ = new SicBoWinLoseRes_WinLoseInfo();
  SicBoGetTableHistory::default_instance_ = new SicBoGetTableHistory();
  SicBoTableHistoryInfo::default_instance_ = new SicBoTableHistoryInfo();
  SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_ = new SicBoTableHistoryInfo_SicBoHistoryInfo();
  OxStartGame::default_instance_ = new OxStartGame();
  OxChangeTable::default_instance_ = new OxChangeTable();
  OxExitTable::default_instance_ = new OxExitTable();
  OxChoiceGameMultiple::default_instance_ = new OxChoiceGameMultiple();
  OxGameStatus::default_instance_ = new OxGameStatus();
  OxGameStatus_OxGamePlayerStatus::default_instance_ = new OxGameStatus_OxGamePlayerStatus();
  OxGameResult::default_instance_ = new OxGameResult();
  OxGameResult_OxGamePlayerResult::default_instance_ = new OxGameResult_OxGamePlayerResult();
  DiceMessage::default_instance_->InitAsDefaultInstance();
  LobbyUserLoginReq::default_instance_->InitAsDefaultInstance();
  LobbyUserLoginRet::default_instance_->InitAsDefaultInstance();
  LobbyHeartBeat::default_instance_->InitAsDefaultInstance();
  LobbyEnterGame::default_instance_->InitAsDefaultInstance();
  UserChatReq::default_instance_->InitAsDefaultInstance();
  UserChatRet::default_instance_->InitAsDefaultInstance();
  UserChatMsg::default_instance_->InitAsDefaultInstance();
  SicBoTableList::default_instance_->InitAsDefaultInstance();
  SicBoTableList_SicBoTableInfo::default_instance_->InitAsDefaultInstance();
  SicBoSitIntoTableReq::default_instance_->InitAsDefaultInstance();
  SicBoSitIntoTableRes::default_instance_->InitAsDefaultInstance();
  SicBoBetAction::default_instance_->InitAsDefaultInstance();
  SicBoBetResult::default_instance_->InitAsDefaultInstance();
  SicBoTableRefresh::default_instance_->InitAsDefaultInstance();
  SicBoTableStatus::default_instance_->InitAsDefaultInstance();
  SicBoTableStatus_SicBoBetInfo::default_instance_->InitAsDefaultInstance();
  SicBoWinLoseRes::default_instance_->InitAsDefaultInstance();
  SicBoWinLoseRes_WinLoseInfo::default_instance_->InitAsDefaultInstance();
  SicBoGetTableHistory::default_instance_->InitAsDefaultInstance();
  SicBoTableHistoryInfo::default_instance_->InitAsDefaultInstance();
  SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_->InitAsDefaultInstance();
  OxStartGame::default_instance_->InitAsDefaultInstance();
  OxChangeTable::default_instance_->InitAsDefaultInstance();
  OxExitTable::default_instance_->InitAsDefaultInstance();
  OxChoiceGameMultiple::default_instance_->InitAsDefaultInstance();
  OxGameStatus::default_instance_->InitAsDefaultInstance();
  OxGameStatus_OxGamePlayerStatus::default_instance_->InitAsDefaultInstance();
  OxGameResult::default_instance_->InitAsDefaultInstance();
  OxGameResult_OxGamePlayerResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameMessage_2eproto {
  StaticDescriptorInitializer_GameMessage_2eproto() {
    protobuf_AddDesc_GameMessage_2eproto();
  }
} static_descriptor_initializer_GameMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameType_descriptor_;
}
bool GameType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SicBoBetPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoBetPosition_descriptor_;
}
bool SicBoBetPosition_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OxGameMultiple_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameMultiple_descriptor_;
}
bool OxGameMultiple_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DiceMessage::kTypeFieldNumber;
const int DiceMessage::kMsgsizeFieldNumber;
const int DiceMessage::kMsgdataFieldNumber;
#endif  // !_MSC_VER

DiceMessage::DiceMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiceMessage::InitAsDefaultInstance() {
}

DiceMessage::DiceMessage(const DiceMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiceMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  msgsize_ = 0;
  msgdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiceMessage::~DiceMessage() {
  SharedDtor();
}

void DiceMessage::SharedDtor() {
  if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
    delete msgdata_;
  }
  if (this != default_instance_) {
  }
}

void DiceMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiceMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiceMessage_descriptor_;
}

const DiceMessage& DiceMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

DiceMessage* DiceMessage::default_instance_ = NULL;

DiceMessage* DiceMessage::New() const {
  return new DiceMessage;
}

void DiceMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    msgsize_ = 0;
    if (has_msgdata()) {
      if (msgdata_ != &::google::protobuf::internal::kEmptyString) {
        msgdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiceMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgsize;
        break;
      }

      // required int32 msgsize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgsize_)));
          set_has_msgsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgdata;
        break;
      }

      // required bytes msgdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiceMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 msgsize = 2;
  if (has_msgsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->msgsize(), output);
  }

  // required bytes msgdata = 3;
  if (has_msgdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->msgdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiceMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 msgsize = 2;
  if (has_msgsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->msgsize(), target);
  }

  // required bytes msgdata = 3;
  if (has_msgdata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msgdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiceMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 msgsize = 2;
    if (has_msgsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgsize());
    }

    // required bytes msgdata = 3;
    if (has_msgdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiceMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiceMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiceMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiceMessage::MergeFrom(const DiceMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msgsize()) {
      set_msgsize(from.msgsize());
    }
    if (from.has_msgdata()) {
      set_msgdata(from.msgdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiceMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiceMessage::CopyFrom(const DiceMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiceMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DiceMessage::Swap(DiceMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(msgsize_, other->msgsize_);
    std::swap(msgdata_, other->msgdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiceMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiceMessage_descriptor_;
  metadata.reflection = DiceMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LobbyUserLoginReq::kUserIdFieldNumber;
const int LobbyUserLoginReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

LobbyUserLoginReq::LobbyUserLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LobbyUserLoginReq::InitAsDefaultInstance() {
}

LobbyUserLoginReq::LobbyUserLoginReq(const LobbyUserLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LobbyUserLoginReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyUserLoginReq::~LobbyUserLoginReq() {
  SharedDtor();
}

void LobbyUserLoginReq::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void LobbyUserLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyUserLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyUserLoginReq_descriptor_;
}

const LobbyUserLoginReq& LobbyUserLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

LobbyUserLoginReq* LobbyUserLoginReq::default_instance_ = NULL;

LobbyUserLoginReq* LobbyUserLoginReq::New() const {
  return new LobbyUserLoginReq;
}

void LobbyUserLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LobbyUserLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LobbyUserLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LobbyUserLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LobbyUserLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyUserLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LobbyUserLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LobbyUserLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LobbyUserLoginReq::MergeFrom(const LobbyUserLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LobbyUserLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyUserLoginReq::CopyFrom(const LobbyUserLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyUserLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LobbyUserLoginReq::Swap(LobbyUserLoginReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LobbyUserLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyUserLoginReq_descriptor_;
  metadata.reflection = LobbyUserLoginReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LobbyUserLoginRet_LoginRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyUserLoginRet_LoginRet_descriptor_;
}
bool LobbyUserLoginRet_LoginRet_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet::LOGIN_RESULT_SUCCESS;
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet::LOGIN_RESULT_FAIL;
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet::LoginRet_MIN;
const LobbyUserLoginRet_LoginRet LobbyUserLoginRet::LoginRet_MAX;
const int LobbyUserLoginRet::LoginRet_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LobbyUserLoginRet::kUserIdFieldNumber;
const int LobbyUserLoginRet::kResultFieldNumber;
#endif  // !_MSC_VER

LobbyUserLoginRet::LobbyUserLoginRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LobbyUserLoginRet::InitAsDefaultInstance() {
}

LobbyUserLoginRet::LobbyUserLoginRet(const LobbyUserLoginRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LobbyUserLoginRet::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyUserLoginRet::~LobbyUserLoginRet() {
  SharedDtor();
}

void LobbyUserLoginRet::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void LobbyUserLoginRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyUserLoginRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyUserLoginRet_descriptor_;
}

const LobbyUserLoginRet& LobbyUserLoginRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

LobbyUserLoginRet* LobbyUserLoginRet::default_instance_ = NULL;

LobbyUserLoginRet* LobbyUserLoginRet::New() const {
  return new LobbyUserLoginRet;
}

void LobbyUserLoginRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LobbyUserLoginRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::LobbyUserLoginRet_LoginRet_IsValid(value)) {
            set_result(static_cast< ::GameMessage::LobbyUserLoginRet_LoginRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LobbyUserLoginRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LobbyUserLoginRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LobbyUserLoginRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required .GameMessage.LobbyUserLoginRet.LoginRet result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyUserLoginRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LobbyUserLoginRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LobbyUserLoginRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LobbyUserLoginRet::MergeFrom(const LobbyUserLoginRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LobbyUserLoginRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyUserLoginRet::CopyFrom(const LobbyUserLoginRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyUserLoginRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LobbyUserLoginRet::Swap(LobbyUserLoginRet* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LobbyUserLoginRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyUserLoginRet_descriptor_;
  metadata.reflection = LobbyUserLoginRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LobbyHeartBeat::kUserIdFieldNumber;
#endif  // !_MSC_VER

LobbyHeartBeat::LobbyHeartBeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LobbyHeartBeat::InitAsDefaultInstance() {
}

LobbyHeartBeat::LobbyHeartBeat(const LobbyHeartBeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LobbyHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyHeartBeat::~LobbyHeartBeat() {
  SharedDtor();
}

void LobbyHeartBeat::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void LobbyHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyHeartBeat_descriptor_;
}

const LobbyHeartBeat& LobbyHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

LobbyHeartBeat* LobbyHeartBeat::default_instance_ = NULL;

LobbyHeartBeat* LobbyHeartBeat::New() const {
  return new LobbyHeartBeat;
}

void LobbyHeartBeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LobbyHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LobbyHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LobbyHeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LobbyHeartBeat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LobbyHeartBeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LobbyHeartBeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LobbyHeartBeat::MergeFrom(const LobbyHeartBeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LobbyHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyHeartBeat::CopyFrom(const LobbyHeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyHeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LobbyHeartBeat::Swap(LobbyHeartBeat* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LobbyHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyHeartBeat_descriptor_;
  metadata.reflection = LobbyHeartBeat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LobbyEnterGame::kUserIdFieldNumber;
const int LobbyEnterGame::kTypeFieldNumber;
#endif  // !_MSC_VER

LobbyEnterGame::LobbyEnterGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LobbyEnterGame::InitAsDefaultInstance() {
}

LobbyEnterGame::LobbyEnterGame(const LobbyEnterGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LobbyEnterGame::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LobbyEnterGame::~LobbyEnterGame() {
  SharedDtor();
}

void LobbyEnterGame::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void LobbyEnterGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LobbyEnterGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LobbyEnterGame_descriptor_;
}

const LobbyEnterGame& LobbyEnterGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

LobbyEnterGame* LobbyEnterGame::default_instance_ = NULL;

LobbyEnterGame* LobbyEnterGame::New() const {
  return new LobbyEnterGame;
}

void LobbyEnterGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LobbyEnterGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .GameMessage.GameType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::GameType_IsValid(value)) {
            set_type(static_cast< ::GameMessage::GameType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LobbyEnterGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required .GameMessage.GameType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LobbyEnterGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.GameType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LobbyEnterGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required .GameMessage.GameType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LobbyEnterGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LobbyEnterGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LobbyEnterGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LobbyEnterGame::MergeFrom(const LobbyEnterGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LobbyEnterGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LobbyEnterGame::CopyFrom(const LobbyEnterGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LobbyEnterGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LobbyEnterGame::Swap(LobbyEnterGame* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LobbyEnterGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LobbyEnterGame_descriptor_;
  metadata.reflection = LobbyEnterGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserChatReq::kUserIdFieldNumber;
const int UserChatReq::kChatmsgFieldNumber;
#endif  // !_MSC_VER

UserChatReq::UserChatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserChatReq::InitAsDefaultInstance() {
}

UserChatReq::UserChatReq(const UserChatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserChatReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chatmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserChatReq::~UserChatReq() {
  SharedDtor();
}

void UserChatReq::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (chatmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete chatmsg_;
  }
  if (this != default_instance_) {
  }
}

void UserChatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserChatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserChatReq_descriptor_;
}

const UserChatReq& UserChatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

UserChatReq* UserChatReq::default_instance_ = NULL;

UserChatReq* UserChatReq::New() const {
  return new UserChatReq;
}

void UserChatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_chatmsg()) {
      if (chatmsg_ != &::google::protobuf::internal::kEmptyString) {
        chatmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserChatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatmsg;
        break;
      }

      // required string chatmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatmsg().data(), this->chatmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserChatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required string chatmsg = 2;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chatmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserChatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string chatmsg = 2;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserChatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string chatmsg = 2;
    if (has_chatmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserChatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserChatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserChatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserChatReq::MergeFrom(const UserChatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_chatmsg()) {
      set_chatmsg(from.chatmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserChatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChatReq::CopyFrom(const UserChatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserChatReq::Swap(UserChatReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(chatmsg_, other->chatmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserChatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserChatReq_descriptor_;
  metadata.reflection = UserChatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserChatRet::kRetFieldNumber;
#endif  // !_MSC_VER

UserChatRet::UserChatRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserChatRet::InitAsDefaultInstance() {
}

UserChatRet::UserChatRet(const UserChatRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserChatRet::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserChatRet::~UserChatRet() {
  SharedDtor();
}

void UserChatRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserChatRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserChatRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserChatRet_descriptor_;
}

const UserChatRet& UserChatRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

UserChatRet* UserChatRet::default_instance_ = NULL;

UserChatRet* UserChatRet::New() const {
  return new UserChatRet;
}

void UserChatRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserChatRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserChatRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserChatRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserChatRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserChatRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserChatRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserChatRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserChatRet::MergeFrom(const UserChatRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserChatRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChatRet::CopyFrom(const UserChatRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChatRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserChatRet::Swap(UserChatRet* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserChatRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserChatRet_descriptor_;
  metadata.reflection = UserChatRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserChatMsg::kUserIdFieldNumber;
const int UserChatMsg::kChatmsgFieldNumber;
#endif  // !_MSC_VER

UserChatMsg::UserChatMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserChatMsg::InitAsDefaultInstance() {
}

UserChatMsg::UserChatMsg(const UserChatMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserChatMsg::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chatmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserChatMsg::~UserChatMsg() {
  SharedDtor();
}

void UserChatMsg::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (chatmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete chatmsg_;
  }
  if (this != default_instance_) {
  }
}

void UserChatMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserChatMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserChatMsg_descriptor_;
}

const UserChatMsg& UserChatMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

UserChatMsg* UserChatMsg::default_instance_ = NULL;

UserChatMsg* UserChatMsg::New() const {
  return new UserChatMsg;
}

void UserChatMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_chatmsg()) {
      if (chatmsg_ != &::google::protobuf::internal::kEmptyString) {
        chatmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserChatMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatmsg;
        break;
      }

      // required string chatmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chatmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chatmsg().data(), this->chatmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserChatMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required string chatmsg = 2;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->chatmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserChatMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string chatmsg = 2;
  if (has_chatmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chatmsg().data(), this->chatmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->chatmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserChatMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string chatmsg = 2;
    if (has_chatmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chatmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserChatMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserChatMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserChatMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserChatMsg::MergeFrom(const UserChatMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_chatmsg()) {
      set_chatmsg(from.chatmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserChatMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChatMsg::CopyFrom(const UserChatMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChatMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserChatMsg::Swap(UserChatMsg* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(chatmsg_, other->chatmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserChatMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserChatMsg_descriptor_;
  metadata.reflection = UserChatMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SicBoTableList_SicBoTableInfo::kTableIdFieldNumber;
const int SicBoTableList_SicBoTableInfo::kTableNameFieldNumber;
const int SicBoTableList_SicBoTableInfo::kTableMaxPlayerFieldNumber;
const int SicBoTableList_SicBoTableInfo::kTableEnterPlayerFieldNumber;
#endif  // !_MSC_VER

SicBoTableList_SicBoTableInfo::SicBoTableList_SicBoTableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoTableList_SicBoTableInfo::InitAsDefaultInstance() {
}

SicBoTableList_SicBoTableInfo::SicBoTableList_SicBoTableInfo(const SicBoTableList_SicBoTableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoTableList_SicBoTableInfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tablemaxplayer_ = 0;
  tableenterplayer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableList_SicBoTableInfo::~SicBoTableList_SicBoTableInfo() {
  SharedDtor();
}

void SicBoTableList_SicBoTableInfo::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void SicBoTableList_SicBoTableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableList_SicBoTableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableList_SicBoTableInfo_descriptor_;
}

const SicBoTableList_SicBoTableInfo& SicBoTableList_SicBoTableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableList_SicBoTableInfo* SicBoTableList_SicBoTableInfo::default_instance_ = NULL;

SicBoTableList_SicBoTableInfo* SicBoTableList_SicBoTableInfo::New() const {
  return new SicBoTableList_SicBoTableInfo;
}

void SicBoTableList_SicBoTableInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    tablemaxplayer_ = 0;
    tableenterplayer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoTableList_SicBoTableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tableName;
        break;
      }

      // required string tableName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tableMaxPlayer;
        break;
      }

      // required int32 tableMaxPlayer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableMaxPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablemaxplayer_)));
          set_has_tablemaxplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tableEnterPlayer;
        break;
      }

      // required int32 tableEnterPlayer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableEnterPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableenterplayer_)));
          set_has_tableenterplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoTableList_SicBoTableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tablename(), output);
  }

  // required int32 tableMaxPlayer = 3;
  if (has_tablemaxplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tablemaxplayer(), output);
  }

  // required int32 tableEnterPlayer = 4;
  if (has_tableenterplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tableenterplayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoTableList_SicBoTableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }

  // required int32 tableMaxPlayer = 3;
  if (has_tablemaxplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tablemaxplayer(), target);
  }

  // required int32 tableEnterPlayer = 4;
  if (has_tableenterplayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tableenterplayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoTableList_SicBoTableInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required string tableName = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // required int32 tableMaxPlayer = 3;
    if (has_tablemaxplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablemaxplayer());
    }

    // required int32 tableEnterPlayer = 4;
    if (has_tableenterplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableenterplayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableList_SicBoTableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoTableList_SicBoTableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoTableList_SicBoTableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoTableList_SicBoTableInfo::MergeFrom(const SicBoTableList_SicBoTableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_tablemaxplayer()) {
      set_tablemaxplayer(from.tablemaxplayer());
    }
    if (from.has_tableenterplayer()) {
      set_tableenterplayer(from.tableenterplayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoTableList_SicBoTableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableList_SicBoTableInfo::CopyFrom(const SicBoTableList_SicBoTableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableList_SicBoTableInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SicBoTableList_SicBoTableInfo::Swap(SicBoTableList_SicBoTableInfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablename_, other->tablename_);
    std::swap(tablemaxplayer_, other->tablemaxplayer_);
    std::swap(tableenterplayer_, other->tableenterplayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoTableList_SicBoTableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableList_SicBoTableInfo_descriptor_;
  metadata.reflection = SicBoTableList_SicBoTableInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SicBoTableList::kTableInfoFieldNumber;
#endif  // !_MSC_VER

SicBoTableList::SicBoTableList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoTableList::InitAsDefaultInstance() {
}

SicBoTableList::SicBoTableList(const SicBoTableList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoTableList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableList::~SicBoTableList() {
  SharedDtor();
}

void SicBoTableList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableList_descriptor_;
}

const SicBoTableList& SicBoTableList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableList* SicBoTableList::default_instance_ = NULL;

SicBoTableList* SicBoTableList::New() const {
  return new SicBoTableList;
}

void SicBoTableList::Clear() {
  tableinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoTableList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tableinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tableInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoTableList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
  for (int i = 0; i < this->tableinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tableinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoTableList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
  for (int i = 0; i < this->tableinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tableinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoTableList::ByteSize() const {
  int total_size = 0;

  // repeated .GameMessage.SicBoTableList.SicBoTableInfo tableInfo = 1;
  total_size += 1 * this->tableinfo_size();
  for (int i = 0; i < this->tableinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tableinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoTableList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoTableList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoTableList::MergeFrom(const SicBoTableList& from) {
  GOOGLE_CHECK_NE(&from, this);
  tableinfo_.MergeFrom(from.tableinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoTableList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableList::CopyFrom(const SicBoTableList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableList::IsInitialized() const {

  for (int i = 0; i < tableinfo_size(); i++) {
    if (!this->tableinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SicBoTableList::Swap(SicBoTableList* other) {
  if (other != this) {
    tableinfo_.Swap(&other->tableinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoTableList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableList_descriptor_;
  metadata.reflection = SicBoTableList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SicBoSitIntoTableReq::kUserIdFieldNumber;
const int SicBoSitIntoTableReq::kTableIdFieldNumber;
#endif  // !_MSC_VER

SicBoSitIntoTableReq::SicBoSitIntoTableReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoSitIntoTableReq::InitAsDefaultInstance() {
}

SicBoSitIntoTableReq::SicBoSitIntoTableReq(const SicBoSitIntoTableReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoSitIntoTableReq::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoSitIntoTableReq::~SicBoSitIntoTableReq() {
  SharedDtor();
}

void SicBoSitIntoTableReq::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void SicBoSitIntoTableReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoSitIntoTableReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoSitIntoTableReq_descriptor_;
}

const SicBoSitIntoTableReq& SicBoSitIntoTableReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoSitIntoTableReq* SicBoSitIntoTableReq::default_instance_ = NULL;

SicBoSitIntoTableReq* SicBoSitIntoTableReq::New() const {
  return new SicBoSitIntoTableReq;
}

void SicBoSitIntoTableReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    tableid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoSitIntoTableReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // required int32 tableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoSitIntoTableReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoSitIntoTableReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoSitIntoTableReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required int32 tableId = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoSitIntoTableReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoSitIntoTableReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoSitIntoTableReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoSitIntoTableReq::MergeFrom(const SicBoSitIntoTableReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoSitIntoTableReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoSitIntoTableReq::CopyFrom(const SicBoSitIntoTableReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoSitIntoTableReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoSitIntoTableReq::Swap(SicBoSitIntoTableReq* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tableid_, other->tableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoSitIntoTableReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoSitIntoTableReq_descriptor_;
  metadata.reflection = SicBoSitIntoTableReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SicBoSitIntoTableRes_SicBoSitTableResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoSitIntoTableRes_SicBoSitTableResult_descriptor_;
}
bool SicBoSitIntoTableRes_SicBoSitTableResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SICBO_SIT_TABLE_SUCCESS;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SICBO_SIT_TABLE_FULL;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SICBO_SIT_TABLE_NO_TABLE;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SICBO_SIT_TABLE_OTHER;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SicBoSitTableResult_MIN;
const SicBoSitIntoTableRes_SicBoSitTableResult SicBoSitIntoTableRes::SicBoSitTableResult_MAX;
const int SicBoSitIntoTableRes::SicBoSitTableResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SicBoSitIntoTableRes::kUserIdFieldNumber;
const int SicBoSitIntoTableRes::kResultFieldNumber;
#endif  // !_MSC_VER

SicBoSitIntoTableRes::SicBoSitIntoTableRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoSitIntoTableRes::InitAsDefaultInstance() {
}

SicBoSitIntoTableRes::SicBoSitIntoTableRes(const SicBoSitIntoTableRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoSitIntoTableRes::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoSitIntoTableRes::~SicBoSitIntoTableRes() {
  SharedDtor();
}

void SicBoSitIntoTableRes::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void SicBoSitIntoTableRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoSitIntoTableRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoSitIntoTableRes_descriptor_;
}

const SicBoSitIntoTableRes& SicBoSitIntoTableRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoSitIntoTableRes* SicBoSitIntoTableRes::default_instance_ = NULL;

SicBoSitIntoTableRes* SicBoSitIntoTableRes::New() const {
  return new SicBoSitIntoTableRes;
}

void SicBoSitIntoTableRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoSitIntoTableRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult_IsValid(value)) {
            set_result(static_cast< ::GameMessage::SicBoSitIntoTableRes_SicBoSitTableResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoSitIntoTableRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoSitIntoTableRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoSitIntoTableRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required .GameMessage.SicBoSitIntoTableRes.SicBoSitTableResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoSitIntoTableRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoSitIntoTableRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoSitIntoTableRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoSitIntoTableRes::MergeFrom(const SicBoSitIntoTableRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoSitIntoTableRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoSitIntoTableRes::CopyFrom(const SicBoSitIntoTableRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoSitIntoTableRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoSitIntoTableRes::Swap(SicBoSitIntoTableRes* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoSitIntoTableRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoSitIntoTableRes_descriptor_;
  metadata.reflection = SicBoSitIntoTableRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SicBoBetAction::kUserIdFieldNumber;
const int SicBoBetAction::kTableIdFieldNumber;
const int SicBoBetAction::kPositionFieldNumber;
const int SicBoBetAction::kBetNumberFieldNumber;
#endif  // !_MSC_VER

SicBoBetAction::SicBoBetAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoBetAction::InitAsDefaultInstance() {
}

SicBoBetAction::SicBoBetAction(const SicBoBetAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoBetAction::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tableid_ = 0;
  position_ = 1;
  betnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoBetAction::~SicBoBetAction() {
  SharedDtor();
}

void SicBoBetAction::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void SicBoBetAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoBetAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoBetAction_descriptor_;
}

const SicBoBetAction& SicBoBetAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoBetAction* SicBoBetAction::default_instance_ = NULL;

SicBoBetAction* SicBoBetAction::New() const {
  return new SicBoBetAction;
}

void SicBoBetAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    tableid_ = 0;
    position_ = 1;
    betnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoBetAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // required int32 tableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // required .GameMessage.SicBoBetPosition position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoBetPosition_IsValid(value)) {
            set_position(static_cast< ::GameMessage::SicBoBetPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_betNumber;
        break;
      }

      // required int32 betNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betnumber_)));
          set_has_betnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoBetAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // required .GameMessage.SicBoBetPosition position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->position(), output);
  }

  // required int32 betNumber = 4;
  if (has_betnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->betnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoBetAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // required .GameMessage.SicBoBetPosition position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->position(), target);
  }

  // required int32 betNumber = 4;
  if (has_betnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->betnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoBetAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required int32 tableId = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required .GameMessage.SicBoBetPosition position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // required int32 betNumber = 4;
    if (has_betnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoBetAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoBetAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoBetAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoBetAction::MergeFrom(const SicBoBetAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_betnumber()) {
      set_betnumber(from.betnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoBetAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoBetAction::CopyFrom(const SicBoBetAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoBetAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SicBoBetAction::Swap(SicBoBetAction* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tableid_, other->tableid_);
    std::swap(position_, other->position_);
    std::swap(betnumber_, other->betnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoBetAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoBetAction_descriptor_;
  metadata.reflection = SicBoBetAction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SicBoBetResult_BetResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoBetResult_BetResult_descriptor_;
}
bool SicBoBetResult_BetResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SicBoBetResult_BetResult SicBoBetResult::SICBO_BET_SUCCESS;
const SicBoBetResult_BetResult SicBoBetResult::SICBO_BET_NO_ENOUGH_MONEY;
const SicBoBetResult_BetResult SicBoBetResult::SICBO_BET_NOT_IN_THIS_TABLE;
const SicBoBetResult_BetResult SicBoBetResult::SICBO_BET_NOT_IN_BET_TIME;
const SicBoBetResult_BetResult SicBoBetResult::BetResult_MIN;
const SicBoBetResult_BetResult SicBoBetResult::BetResult_MAX;
const int SicBoBetResult::BetResult_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SicBoBetResult::kUserIdFieldNumber;
const int SicBoBetResult::kResultFieldNumber;
#endif  // !_MSC_VER

SicBoBetResult::SicBoBetResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoBetResult::InitAsDefaultInstance() {
}

SicBoBetResult::SicBoBetResult(const SicBoBetResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoBetResult::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoBetResult::~SicBoBetResult() {
  SharedDtor();
}

void SicBoBetResult::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void SicBoBetResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoBetResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoBetResult_descriptor_;
}

const SicBoBetResult& SicBoBetResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoBetResult* SicBoBetResult::default_instance_ = NULL;

SicBoBetResult* SicBoBetResult::New() const {
  return new SicBoBetResult;
}

void SicBoBetResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoBetResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .GameMessage.SicBoBetResult.BetResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoBetResult_BetResult_IsValid(value)) {
            set_result(static_cast< ::GameMessage::SicBoBetResult_BetResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoBetResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required .GameMessage.SicBoBetResult.BetResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoBetResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.SicBoBetResult.BetResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoBetResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required .GameMessage.SicBoBetResult.BetResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoBetResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoBetResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoBetResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoBetResult::MergeFrom(const SicBoBetResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoBetResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoBetResult::CopyFrom(const SicBoBetResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoBetResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoBetResult::Swap(SicBoBetResult* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoBetResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoBetResult_descriptor_;
  metadata.reflection = SicBoBetResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SicBoTableRefresh::kUserIdFieldNumber;
const int SicBoTableRefresh::kTableIdFieldNumber;
#endif  // !_MSC_VER

SicBoTableRefresh::SicBoTableRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoTableRefresh::InitAsDefaultInstance() {
}

SicBoTableRefresh::SicBoTableRefresh(const SicBoTableRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoTableRefresh::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableRefresh::~SicBoTableRefresh() {
  SharedDtor();
}

void SicBoTableRefresh::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void SicBoTableRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableRefresh_descriptor_;
}

const SicBoTableRefresh& SicBoTableRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableRefresh* SicBoTableRefresh::default_instance_ = NULL;

SicBoTableRefresh* SicBoTableRefresh::New() const {
  return new SicBoTableRefresh;
}

void SicBoTableRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    tableid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoTableRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // required int32 tableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoTableRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoTableRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoTableRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required int32 tableId = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoTableRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoTableRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoTableRefresh::MergeFrom(const SicBoTableRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoTableRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableRefresh::CopyFrom(const SicBoTableRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableRefresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoTableRefresh::Swap(SicBoTableRefresh* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tableid_, other->tableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoTableRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableRefresh_descriptor_;
  metadata.reflection = SicBoTableRefresh_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SicBoTableStatus_SicBoTableState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableStatus_SicBoTableState_descriptor_;
}
bool SicBoTableStatus_SicBoTableState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SicBoTableStatus_SicBoTableState SicBoTableStatus::SICBO_TABLE_STATE_BET;
const SicBoTableStatus_SicBoTableState SicBoTableStatus::SICBO_TABLE_STATE_RESULT;
const SicBoTableStatus_SicBoTableState SicBoTableStatus::SicBoTableState_MIN;
const SicBoTableStatus_SicBoTableState SicBoTableStatus::SicBoTableState_MAX;
const int SicBoTableStatus::SicBoTableState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SicBoTableStatus_SicBoBetInfo::kPositionFieldNumber;
const int SicBoTableStatus_SicBoBetInfo::kMoneyFieldNumber;
#endif  // !_MSC_VER

SicBoTableStatus_SicBoBetInfo::SicBoTableStatus_SicBoBetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoTableStatus_SicBoBetInfo::InitAsDefaultInstance() {
}

SicBoTableStatus_SicBoBetInfo::SicBoTableStatus_SicBoBetInfo(const SicBoTableStatus_SicBoBetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoTableStatus_SicBoBetInfo::SharedCtor() {
  _cached_size_ = 0;
  position_ = 1;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableStatus_SicBoBetInfo::~SicBoTableStatus_SicBoBetInfo() {
  SharedDtor();
}

void SicBoTableStatus_SicBoBetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableStatus_SicBoBetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableStatus_SicBoBetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableStatus_SicBoBetInfo_descriptor_;
}

const SicBoTableStatus_SicBoBetInfo& SicBoTableStatus_SicBoBetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableStatus_SicBoBetInfo* SicBoTableStatus_SicBoBetInfo::default_instance_ = NULL;

SicBoTableStatus_SicBoBetInfo* SicBoTableStatus_SicBoBetInfo::New() const {
  return new SicBoTableStatus_SicBoBetInfo;
}

void SicBoTableStatus_SicBoBetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 1;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoTableStatus_SicBoBetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameMessage.SicBoBetPosition position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoBetPosition_IsValid(value)) {
            set_position(static_cast< ::GameMessage::SicBoBetPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // required int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoTableStatus_SicBoBetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameMessage.SicBoBetPosition position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->position(), output);
  }

  // required int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoTableStatus_SicBoBetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GameMessage.SicBoBetPosition position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->position(), target);
  }

  // required int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoTableStatus_SicBoBetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameMessage.SicBoBetPosition position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // required int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableStatus_SicBoBetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoTableStatus_SicBoBetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoTableStatus_SicBoBetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoTableStatus_SicBoBetInfo::MergeFrom(const SicBoTableStatus_SicBoBetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoTableStatus_SicBoBetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableStatus_SicBoBetInfo::CopyFrom(const SicBoTableStatus_SicBoBetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableStatus_SicBoBetInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoTableStatus_SicBoBetInfo::Swap(SicBoTableStatus_SicBoBetInfo* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoTableStatus_SicBoBetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableStatus_SicBoBetInfo_descriptor_;
  metadata.reflection = SicBoTableStatus_SicBoBetInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SicBoTableStatus::kTableIdFieldNumber;
const int SicBoTableStatus::kRoundIdFieldNumber;
const int SicBoTableStatus::kStateFieldNumber;
const int SicBoTableStatus::kRestSeondsFieldNumber;
const int SicBoTableStatus::kBetInfoFieldNumber;
#endif  // !_MSC_VER

SicBoTableStatus::SicBoTableStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoTableStatus::InitAsDefaultInstance() {
}

SicBoTableStatus::SicBoTableStatus(const SicBoTableStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoTableStatus::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  roundid_ = 0;
  state_ = 1;
  restseonds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableStatus::~SicBoTableStatus() {
  SharedDtor();
}

void SicBoTableStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableStatus_descriptor_;
}

const SicBoTableStatus& SicBoTableStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableStatus* SicBoTableStatus::default_instance_ = NULL;

SicBoTableStatus* SicBoTableStatus::New() const {
  return new SicBoTableStatus;
}

void SicBoTableStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
    roundid_ = 0;
    state_ = 1;
    restseonds_ = 0;
  }
  betinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoTableStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roundId;
        break;
      }

      // required int32 roundId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roundid_)));
          set_has_roundid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoTableStatus_SicBoTableState_IsValid(value)) {
            set_state(static_cast< ::GameMessage::SicBoTableStatus_SicBoTableState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_restSeonds;
        break;
      }

      // required int32 restSeonds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restSeonds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restseonds_)));
          set_has_restseonds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_betInfo;
        break;
      }

      // repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_betInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_betinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_betInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoTableStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 roundId = 2;
  if (has_roundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roundid(), output);
  }

  // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // required int32 restSeonds = 4;
  if (has_restseonds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->restseonds(), output);
  }

  // repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
  for (int i = 0; i < this->betinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->betinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoTableStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 roundId = 2;
  if (has_roundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roundid(), target);
  }

  // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // required int32 restSeonds = 4;
  if (has_restseonds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->restseonds(), target);
  }

  // repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
  for (int i = 0; i < this->betinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->betinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoTableStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 roundId = 2;
    if (has_roundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roundid());
    }

    // required .GameMessage.SicBoTableStatus.SicBoTableState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required int32 restSeonds = 4;
    if (has_restseonds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restseonds());
    }

  }
  // repeated .GameMessage.SicBoTableStatus.SicBoBetInfo betInfo = 5;
  total_size += 1 * this->betinfo_size();
  for (int i = 0; i < this->betinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->betinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoTableStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoTableStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoTableStatus::MergeFrom(const SicBoTableStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  betinfo_.MergeFrom(from.betinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_roundid()) {
      set_roundid(from.roundid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_restseonds()) {
      set_restseonds(from.restseonds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoTableStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableStatus::CopyFrom(const SicBoTableStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < betinfo_size(); i++) {
    if (!this->betinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SicBoTableStatus::Swap(SicBoTableStatus* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(roundid_, other->roundid_);
    std::swap(state_, other->state_);
    std::swap(restseonds_, other->restseonds_);
    betinfo_.Swap(&other->betinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoTableStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableStatus_descriptor_;
  metadata.reflection = SicBoTableStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SicBoWinLoseRes_WinLoseInfo::kPositionFieldNumber;
const int SicBoWinLoseRes_WinLoseInfo::kBetMoneyFieldNumber;
const int SicBoWinLoseRes_WinLoseInfo::kWinMoneyFieldNumber;
#endif  // !_MSC_VER

SicBoWinLoseRes_WinLoseInfo::SicBoWinLoseRes_WinLoseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoWinLoseRes_WinLoseInfo::InitAsDefaultInstance() {
}

SicBoWinLoseRes_WinLoseInfo::SicBoWinLoseRes_WinLoseInfo(const SicBoWinLoseRes_WinLoseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoWinLoseRes_WinLoseInfo::SharedCtor() {
  _cached_size_ = 0;
  position_ = 1;
  betmoney_ = 0;
  winmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoWinLoseRes_WinLoseInfo::~SicBoWinLoseRes_WinLoseInfo() {
  SharedDtor();
}

void SicBoWinLoseRes_WinLoseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoWinLoseRes_WinLoseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoWinLoseRes_WinLoseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoWinLoseRes_WinLoseInfo_descriptor_;
}

const SicBoWinLoseRes_WinLoseInfo& SicBoWinLoseRes_WinLoseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoWinLoseRes_WinLoseInfo* SicBoWinLoseRes_WinLoseInfo::default_instance_ = NULL;

SicBoWinLoseRes_WinLoseInfo* SicBoWinLoseRes_WinLoseInfo::New() const {
  return new SicBoWinLoseRes_WinLoseInfo;
}

void SicBoWinLoseRes_WinLoseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 1;
    betmoney_ = 0;
    winmoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoWinLoseRes_WinLoseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .GameMessage.SicBoBetPosition position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::SicBoBetPosition_IsValid(value)) {
            set_position(static_cast< ::GameMessage::SicBoBetPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_betMoney;
        break;
      }

      // required int32 betMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_betMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &betmoney_)));
          set_has_betmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winMoney;
        break;
      }

      // required int32 winMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winmoney_)));
          set_has_winmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoWinLoseRes_WinLoseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .GameMessage.SicBoBetPosition position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->position(), output);
  }

  // required int32 betMoney = 2;
  if (has_betmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->betmoney(), output);
  }

  // required int32 winMoney = 3;
  if (has_winmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoWinLoseRes_WinLoseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .GameMessage.SicBoBetPosition position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->position(), target);
  }

  // required int32 betMoney = 2;
  if (has_betmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->betmoney(), target);
  }

  // required int32 winMoney = 3;
  if (has_winmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoWinLoseRes_WinLoseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .GameMessage.SicBoBetPosition position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position());
    }

    // required int32 betMoney = 2;
    if (has_betmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->betmoney());
    }

    // required int32 winMoney = 3;
    if (has_winmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winmoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoWinLoseRes_WinLoseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoWinLoseRes_WinLoseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoWinLoseRes_WinLoseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoWinLoseRes_WinLoseInfo::MergeFrom(const SicBoWinLoseRes_WinLoseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_betmoney()) {
      set_betmoney(from.betmoney());
    }
    if (from.has_winmoney()) {
      set_winmoney(from.winmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoWinLoseRes_WinLoseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoWinLoseRes_WinLoseInfo::CopyFrom(const SicBoWinLoseRes_WinLoseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoWinLoseRes_WinLoseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SicBoWinLoseRes_WinLoseInfo::Swap(SicBoWinLoseRes_WinLoseInfo* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(betmoney_, other->betmoney_);
    std::swap(winmoney_, other->winmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoWinLoseRes_WinLoseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoWinLoseRes_WinLoseInfo_descriptor_;
  metadata.reflection = SicBoWinLoseRes_WinLoseInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SicBoWinLoseRes::kUserIdFieldNumber;
const int SicBoWinLoseRes::kDiceNumberFieldNumber;
const int SicBoWinLoseRes::kWinInfoFieldNumber;
#endif  // !_MSC_VER

SicBoWinLoseRes::SicBoWinLoseRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoWinLoseRes::InitAsDefaultInstance() {
}

SicBoWinLoseRes::SicBoWinLoseRes(const SicBoWinLoseRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoWinLoseRes::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoWinLoseRes::~SicBoWinLoseRes() {
  SharedDtor();
}

void SicBoWinLoseRes::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void SicBoWinLoseRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoWinLoseRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoWinLoseRes_descriptor_;
}

const SicBoWinLoseRes& SicBoWinLoseRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoWinLoseRes* SicBoWinLoseRes::default_instance_ = NULL;

SicBoWinLoseRes* SicBoWinLoseRes::New() const {
  return new SicBoWinLoseRes;
}

void SicBoWinLoseRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  dicenumber_.Clear();
  wininfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoWinLoseRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diceNumber;
        break;
      }

      // repeated int32 diceNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diceNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_dicenumber())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dicenumber())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diceNumber;
        if (input->ExpectTag(26)) goto parse_winInfo;
        break;
      }

      // repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wininfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_winInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoWinLoseRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // repeated int32 diceNumber = 2;
  for (int i = 0; i < this->dicenumber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->dicenumber(i), output);
  }

  // repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
  for (int i = 0; i < this->wininfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wininfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoWinLoseRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // repeated int32 diceNumber = 2;
  for (int i = 0; i < this->dicenumber_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->dicenumber(i), target);
  }

  // repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
  for (int i = 0; i < this->wininfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wininfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoWinLoseRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  // repeated int32 diceNumber = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dicenumber_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dicenumber(i));
    }
    total_size += 1 * this->dicenumber_size() + data_size;
  }

  // repeated .GameMessage.SicBoWinLoseRes.WinLoseInfo winInfo = 3;
  total_size += 1 * this->wininfo_size();
  for (int i = 0; i < this->wininfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wininfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoWinLoseRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoWinLoseRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoWinLoseRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoWinLoseRes::MergeFrom(const SicBoWinLoseRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  dicenumber_.MergeFrom(from.dicenumber_);
  wininfo_.MergeFrom(from.wininfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoWinLoseRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoWinLoseRes::CopyFrom(const SicBoWinLoseRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoWinLoseRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < wininfo_size(); i++) {
    if (!this->wininfo(i).IsInitialized()) return false;
  }
  return true;
}

void SicBoWinLoseRes::Swap(SicBoWinLoseRes* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    dicenumber_.Swap(&other->dicenumber_);
    wininfo_.Swap(&other->wininfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoWinLoseRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoWinLoseRes_descriptor_;
  metadata.reflection = SicBoWinLoseRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SicBoGetTableHistory::kUserIdFieldNumber;
const int SicBoGetTableHistory::kTableIdFieldNumber;
#endif  // !_MSC_VER

SicBoGetTableHistory::SicBoGetTableHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoGetTableHistory::InitAsDefaultInstance() {
}

SicBoGetTableHistory::SicBoGetTableHistory(const SicBoGetTableHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoGetTableHistory::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoGetTableHistory::~SicBoGetTableHistory() {
  SharedDtor();
}

void SicBoGetTableHistory::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void SicBoGetTableHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoGetTableHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoGetTableHistory_descriptor_;
}

const SicBoGetTableHistory& SicBoGetTableHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoGetTableHistory* SicBoGetTableHistory::default_instance_ = NULL;

SicBoGetTableHistory* SicBoGetTableHistory::New() const {
  return new SicBoGetTableHistory;
}

void SicBoGetTableHistory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    tableid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoGetTableHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tableId;
        break;
      }

      // required int32 tableId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoGetTableHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoGetTableHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required int32 tableId = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoGetTableHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required int32 tableId = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoGetTableHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoGetTableHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoGetTableHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoGetTableHistory::MergeFrom(const SicBoGetTableHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoGetTableHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoGetTableHistory::CopyFrom(const SicBoGetTableHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoGetTableHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SicBoGetTableHistory::Swap(SicBoGetTableHistory* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tableid_, other->tableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoGetTableHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoGetTableHistory_descriptor_;
  metadata.reflection = SicBoGetTableHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SicBoTableHistoryInfo_SicBoHistoryInfo::kGameIdFieldNumber;
const int SicBoTableHistoryInfo_SicBoHistoryInfo::kDiceNumberFieldNumber;
#endif  // !_MSC_VER

SicBoTableHistoryInfo_SicBoHistoryInfo::SicBoTableHistoryInfo_SicBoHistoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::InitAsDefaultInstance() {
}

SicBoTableHistoryInfo_SicBoHistoryInfo::SicBoTableHistoryInfo_SicBoHistoryInfo(const SicBoTableHistoryInfo_SicBoHistoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableHistoryInfo_SicBoHistoryInfo::~SicBoTableHistoryInfo_SicBoHistoryInfo() {
  SharedDtor();
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableHistoryInfo_SicBoHistoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_;
}

const SicBoTableHistoryInfo_SicBoHistoryInfo& SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableHistoryInfo_SicBoHistoryInfo* SicBoTableHistoryInfo_SicBoHistoryInfo::default_instance_ = NULL;

SicBoTableHistoryInfo_SicBoHistoryInfo* SicBoTableHistoryInfo_SicBoHistoryInfo::New() const {
  return new SicBoTableHistoryInfo_SicBoHistoryInfo;
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  dicenumber_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoTableHistoryInfo_SicBoHistoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diceNumber;
        break;
      }

      // repeated int32 diceNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diceNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_dicenumber())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dicenumber())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diceNumber;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // repeated int32 diceNumber = 2;
  for (int i = 0; i < this->dicenumber_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->dicenumber(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoTableHistoryInfo_SicBoHistoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameId = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // repeated int32 diceNumber = 2;
  for (int i = 0; i < this->dicenumber_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->dicenumber(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoTableHistoryInfo_SicBoHistoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  // repeated int32 diceNumber = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dicenumber_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dicenumber(i));
    }
    total_size += 1 * this->dicenumber_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoTableHistoryInfo_SicBoHistoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoTableHistoryInfo_SicBoHistoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::MergeFrom(const SicBoTableHistoryInfo_SicBoHistoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dicenumber_.MergeFrom(from.dicenumber_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::CopyFrom(const SicBoTableHistoryInfo_SicBoHistoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableHistoryInfo_SicBoHistoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SicBoTableHistoryInfo_SicBoHistoryInfo::Swap(SicBoTableHistoryInfo_SicBoHistoryInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    dicenumber_.Swap(&other->dicenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoTableHistoryInfo_SicBoHistoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableHistoryInfo_SicBoHistoryInfo_descriptor_;
  metadata.reflection = SicBoTableHistoryInfo_SicBoHistoryInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SicBoTableHistoryInfo::kTableIdFieldNumber;
const int SicBoTableHistoryInfo::kHistoryInfoFieldNumber;
#endif  // !_MSC_VER

SicBoTableHistoryInfo::SicBoTableHistoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SicBoTableHistoryInfo::InitAsDefaultInstance() {
}

SicBoTableHistoryInfo::SicBoTableHistoryInfo(const SicBoTableHistoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SicBoTableHistoryInfo::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SicBoTableHistoryInfo::~SicBoTableHistoryInfo() {
  SharedDtor();
}

void SicBoTableHistoryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SicBoTableHistoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SicBoTableHistoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SicBoTableHistoryInfo_descriptor_;
}

const SicBoTableHistoryInfo& SicBoTableHistoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

SicBoTableHistoryInfo* SicBoTableHistoryInfo::default_instance_ = NULL;

SicBoTableHistoryInfo* SicBoTableHistoryInfo::New() const {
  return new SicBoTableHistoryInfo;
}

void SicBoTableHistoryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tableid_ = 0;
  }
  historyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SicBoTableHistoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_historyInfo;
        break;
      }

      // repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_historyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_historyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_historyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SicBoTableHistoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
  for (int i = 0; i < this->historyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->historyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SicBoTableHistoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tableId = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
  for (int i = 0; i < this->historyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->historyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SicBoTableHistoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableId = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

  }
  // repeated .GameMessage.SicBoTableHistoryInfo.SicBoHistoryInfo historyInfo = 2;
  total_size += 1 * this->historyinfo_size();
  for (int i = 0; i < this->historyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->historyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SicBoTableHistoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SicBoTableHistoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SicBoTableHistoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SicBoTableHistoryInfo::MergeFrom(const SicBoTableHistoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  historyinfo_.MergeFrom(from.historyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SicBoTableHistoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SicBoTableHistoryInfo::CopyFrom(const SicBoTableHistoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SicBoTableHistoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < historyinfo_size(); i++) {
    if (!this->historyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SicBoTableHistoryInfo::Swap(SicBoTableHistoryInfo* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    historyinfo_.Swap(&other->historyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SicBoTableHistoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SicBoTableHistoryInfo_descriptor_;
  metadata.reflection = SicBoTableHistoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OxStartGame::kUserIdFieldNumber;
#endif  // !_MSC_VER

OxStartGame::OxStartGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OxStartGame::InitAsDefaultInstance() {
}

OxStartGame::OxStartGame(const OxStartGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OxStartGame::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxStartGame::~OxStartGame() {
  SharedDtor();
}

void OxStartGame::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void OxStartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxStartGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxStartGame_descriptor_;
}

const OxStartGame& OxStartGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxStartGame* OxStartGame::default_instance_ = NULL;

OxStartGame* OxStartGame::New() const {
  return new OxStartGame;
}

void OxStartGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OxStartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OxStartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OxStartGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OxStartGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxStartGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OxStartGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OxStartGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OxStartGame::MergeFrom(const OxStartGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OxStartGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxStartGame::CopyFrom(const OxStartGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxStartGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OxStartGame::Swap(OxStartGame* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OxStartGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxStartGame_descriptor_;
  metadata.reflection = OxStartGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OxChangeTable::kUserIdFieldNumber;
#endif  // !_MSC_VER

OxChangeTable::OxChangeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OxChangeTable::InitAsDefaultInstance() {
}

OxChangeTable::OxChangeTable(const OxChangeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OxChangeTable::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxChangeTable::~OxChangeTable() {
  SharedDtor();
}

void OxChangeTable::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void OxChangeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxChangeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxChangeTable_descriptor_;
}

const OxChangeTable& OxChangeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxChangeTable* OxChangeTable::default_instance_ = NULL;

OxChangeTable* OxChangeTable::New() const {
  return new OxChangeTable;
}

void OxChangeTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OxChangeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OxChangeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OxChangeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OxChangeTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxChangeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OxChangeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OxChangeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OxChangeTable::MergeFrom(const OxChangeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OxChangeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxChangeTable::CopyFrom(const OxChangeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxChangeTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OxChangeTable::Swap(OxChangeTable* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OxChangeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxChangeTable_descriptor_;
  metadata.reflection = OxChangeTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OxExitTable::kUserIdFieldNumber;
#endif  // !_MSC_VER

OxExitTable::OxExitTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OxExitTable::InitAsDefaultInstance() {
}

OxExitTable::OxExitTable(const OxExitTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OxExitTable::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxExitTable::~OxExitTable() {
  SharedDtor();
}

void OxExitTable::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void OxExitTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxExitTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxExitTable_descriptor_;
}

const OxExitTable& OxExitTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxExitTable* OxExitTable::default_instance_ = NULL;

OxExitTable* OxExitTable::New() const {
  return new OxExitTable;
}

void OxExitTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OxExitTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OxExitTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OxExitTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OxExitTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxExitTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OxExitTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OxExitTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OxExitTable::MergeFrom(const OxExitTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OxExitTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxExitTable::CopyFrom(const OxExitTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxExitTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OxExitTable::Swap(OxExitTable* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OxExitTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxExitTable_descriptor_;
  metadata.reflection = OxExitTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OxChoiceGameMultiple::kUserIdFieldNumber;
const int OxChoiceGameMultiple::kMultipleFieldNumber;
#endif  // !_MSC_VER

OxChoiceGameMultiple::OxChoiceGameMultiple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OxChoiceGameMultiple::InitAsDefaultInstance() {
}

OxChoiceGameMultiple::OxChoiceGameMultiple(const OxChoiceGameMultiple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OxChoiceGameMultiple::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  multiple_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxChoiceGameMultiple::~OxChoiceGameMultiple() {
  SharedDtor();
}

void OxChoiceGameMultiple::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void OxChoiceGameMultiple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxChoiceGameMultiple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxChoiceGameMultiple_descriptor_;
}

const OxChoiceGameMultiple& OxChoiceGameMultiple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxChoiceGameMultiple* OxChoiceGameMultiple::default_instance_ = NULL;

OxChoiceGameMultiple* OxChoiceGameMultiple::New() const {
  return new OxChoiceGameMultiple;
}

void OxChoiceGameMultiple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    multiple_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OxChoiceGameMultiple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_multiple;
        break;
      }

      // required .GameMessage.OxGameMultiple multiple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::OxGameMultiple_IsValid(value)) {
            set_multiple(static_cast< ::GameMessage::OxGameMultiple >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OxChoiceGameMultiple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required .GameMessage.OxGameMultiple multiple = 2;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->multiple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OxChoiceGameMultiple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .GameMessage.OxGameMultiple multiple = 2;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->multiple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OxChoiceGameMultiple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required .GameMessage.OxGameMultiple multiple = 2;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->multiple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxChoiceGameMultiple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OxChoiceGameMultiple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OxChoiceGameMultiple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OxChoiceGameMultiple::MergeFrom(const OxChoiceGameMultiple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OxChoiceGameMultiple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxChoiceGameMultiple::CopyFrom(const OxChoiceGameMultiple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxChoiceGameMultiple::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OxChoiceGameMultiple::Swap(OxChoiceGameMultiple* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(multiple_, other->multiple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OxChoiceGameMultiple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxChoiceGameMultiple_descriptor_;
  metadata.reflection = OxChoiceGameMultiple_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OxGameStatus_DiceNumber_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameStatus_DiceNumber_descriptor_;
}
bool OxGameStatus_DiceNumber_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_ONE;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_TWO;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_THREE;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_FOUR;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_FIVE;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NUMBER_SIX;
const OxGameStatus_DiceNumber OxGameStatus::DICE_NO_DICE;
const OxGameStatus_DiceNumber OxGameStatus::DiceNumber_MIN;
const OxGameStatus_DiceNumber OxGameStatus::DiceNumber_MAX;
const int OxGameStatus::DiceNumber_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OxGameStatus_OxGamePlayerStatus::kUserNameFieldNumber;
const int OxGameStatus_OxGamePlayerStatus::kSeatPositionFieldNumber;
const int OxGameStatus_OxGamePlayerStatus::kGameCoinsFieldNumber;
const int OxGameStatus_OxGamePlayerStatus::kMultipleFieldNumber;
const int OxGameStatus_OxGamePlayerStatus::kDiceFieldNumber;
#endif  // !_MSC_VER

OxGameStatus_OxGamePlayerStatus::OxGameStatus_OxGamePlayerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OxGameStatus_OxGamePlayerStatus::InitAsDefaultInstance() {
}

OxGameStatus_OxGamePlayerStatus::OxGameStatus_OxGamePlayerStatus(const OxGameStatus_OxGamePlayerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OxGameStatus_OxGamePlayerStatus::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seatposition_ = 0;
  gamecoins_ = 0;
  multiple_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxGameStatus_OxGamePlayerStatus::~OxGameStatus_OxGamePlayerStatus() {
  SharedDtor();
}

void OxGameStatus_OxGamePlayerStatus::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void OxGameStatus_OxGamePlayerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxGameStatus_OxGamePlayerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameStatus_OxGamePlayerStatus_descriptor_;
}

const OxGameStatus_OxGamePlayerStatus& OxGameStatus_OxGamePlayerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxGameStatus_OxGamePlayerStatus* OxGameStatus_OxGamePlayerStatus::default_instance_ = NULL;

OxGameStatus_OxGamePlayerStatus* OxGameStatus_OxGamePlayerStatus::New() const {
  return new OxGameStatus_OxGamePlayerStatus;
}

void OxGameStatus_OxGamePlayerStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    seatposition_ = 0;
    gamecoins_ = 0;
    multiple_ = 1;
  }
  dice_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OxGameStatus_OxGamePlayerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seatPosition;
        break;
      }

      // required int32 seatPosition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatposition_)));
          set_has_seatposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameCoins;
        break;
      }

      // required int32 gameCoins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecoins_)));
          set_has_gamecoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_multiple;
        break;
      }

      // optional .GameMessage.OxGameMultiple multiple = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiple:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::OxGameMultiple_IsValid(value)) {
            set_multiple(static_cast< ::GameMessage::OxGameMultiple >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dice;
        break;
      }

      // repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dice:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::OxGameStatus_DiceNumber_IsValid(value)) {
            add_dice(static_cast< ::GameMessage::OxGameStatus_DiceNumber >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::GameMessage::OxGameStatus_DiceNumber_IsValid,
                 this->mutable_dice())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dice;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OxGameStatus_OxGamePlayerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required int32 seatPosition = 2;
  if (has_seatposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatposition(), output);
  }

  // required int32 gameCoins = 3;
  if (has_gamecoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecoins(), output);
  }

  // optional .GameMessage.OxGameMultiple multiple = 4;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->multiple(), output);
  }

  // repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
  for (int i = 0; i < this->dice_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dice(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OxGameStatus_OxGamePlayerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required int32 seatPosition = 2;
  if (has_seatposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatposition(), target);
  }

  // required int32 gameCoins = 3;
  if (has_gamecoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecoins(), target);
  }

  // optional .GameMessage.OxGameMultiple multiple = 4;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->multiple(), target);
  }

  // repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
  for (int i = 0; i < this->dice_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dice(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OxGameStatus_OxGamePlayerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required int32 seatPosition = 2;
    if (has_seatposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatposition());
    }

    // required int32 gameCoins = 3;
    if (has_gamecoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecoins());
    }

    // optional .GameMessage.OxGameMultiple multiple = 4;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->multiple());
    }

  }
  // repeated .GameMessage.OxGameStatus.DiceNumber dice = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->dice_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dice(i));
    }
    total_size += 1 * this->dice_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxGameStatus_OxGamePlayerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OxGameStatus_OxGamePlayerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OxGameStatus_OxGamePlayerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OxGameStatus_OxGamePlayerStatus::MergeFrom(const OxGameStatus_OxGamePlayerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  dice_.MergeFrom(from.dice_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_seatposition()) {
      set_seatposition(from.seatposition());
    }
    if (from.has_gamecoins()) {
      set_gamecoins(from.gamecoins());
    }
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OxGameStatus_OxGamePlayerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxGameStatus_OxGamePlayerStatus::CopyFrom(const OxGameStatus_OxGamePlayerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxGameStatus_OxGamePlayerStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OxGameStatus_OxGamePlayerStatus::Swap(OxGameStatus_OxGamePlayerStatus* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(seatposition_, other->seatposition_);
    std::swap(gamecoins_, other->gamecoins_);
    std::swap(multiple_, other->multiple_);
    dice_.Swap(&other->dice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OxGameStatus_OxGamePlayerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxGameStatus_OxGamePlayerStatus_descriptor_;
  metadata.reflection = OxGameStatus_OxGamePlayerStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OxGameStatus::kUserIdFieldNumber;
const int OxGameStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

OxGameStatus::OxGameStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OxGameStatus::InitAsDefaultInstance() {
}

OxGameStatus::OxGameStatus(const OxGameStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OxGameStatus::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxGameStatus::~OxGameStatus() {
  SharedDtor();
}

void OxGameStatus::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void OxGameStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxGameStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameStatus_descriptor_;
}

const OxGameStatus& OxGameStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxGameStatus* OxGameStatus::default_instance_ = NULL;

OxGameStatus* OxGameStatus::New() const {
  return new OxGameStatus;
}

void OxGameStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OxGameStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OxGameStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OxGameStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OxGameStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  // repeated .GameMessage.OxGameStatus.OxGamePlayerStatus status = 2;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxGameStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OxGameStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OxGameStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OxGameStatus::MergeFrom(const OxGameStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OxGameStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxGameStatus::CopyFrom(const OxGameStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxGameStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  return true;
}

void OxGameStatus::Swap(OxGameStatus* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OxGameStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxGameStatus_descriptor_;
  metadata.reflection = OxGameStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OxGameResult_OxType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameResult_OxType_descriptor_;
}
bool OxGameResult_OxType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OxGameResult_OxType OxGameResult::OX_TYPE_NO_OX;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_1;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_2;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_3;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_4;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_5;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_6;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_7;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_8;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_9;
const OxGameResult_OxType OxGameResult::OX_TYPE_OX_OX;
const OxGameResult_OxType OxGameResult::OxType_MIN;
const OxGameResult_OxType OxGameResult::OxType_MAX;
const int OxGameResult::OxType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OxGameResult_OxGamePlayerResult::kUserNameFieldNumber;
const int OxGameResult_OxGamePlayerResult::kDiceTypeFieldNumber;
const int OxGameResult_OxGamePlayerResult::kWinResultFieldNumber;
#endif  // !_MSC_VER

OxGameResult_OxGamePlayerResult::OxGameResult_OxGamePlayerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OxGameResult_OxGamePlayerResult::InitAsDefaultInstance() {
}

OxGameResult_OxGamePlayerResult::OxGameResult_OxGamePlayerResult(const OxGameResult_OxGamePlayerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OxGameResult_OxGamePlayerResult::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dicetype_ = 1;
  winresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxGameResult_OxGamePlayerResult::~OxGameResult_OxGamePlayerResult() {
  SharedDtor();
}

void OxGameResult_OxGamePlayerResult::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void OxGameResult_OxGamePlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxGameResult_OxGamePlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameResult_OxGamePlayerResult_descriptor_;
}

const OxGameResult_OxGamePlayerResult& OxGameResult_OxGamePlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxGameResult_OxGamePlayerResult* OxGameResult_OxGamePlayerResult::default_instance_ = NULL;

OxGameResult_OxGamePlayerResult* OxGameResult_OxGamePlayerResult::New() const {
  return new OxGameResult_OxGamePlayerResult;
}

void OxGameResult_OxGamePlayerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    dicetype_ = 1;
    winresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OxGameResult_OxGamePlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_diceType;
        break;
      }

      // required .GameMessage.OxGameResult.OxType diceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GameMessage::OxGameResult_OxType_IsValid(value)) {
            set_dicetype(static_cast< ::GameMessage::OxGameResult_OxType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_winResult;
        break;
      }

      // required int32 winResult = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winresult_)));
          set_has_winresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OxGameResult_OxGamePlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // required .GameMessage.OxGameResult.OxType diceType = 2;
  if (has_dicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dicetype(), output);
  }

  // required int32 winResult = 3;
  if (has_winresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->winresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OxGameResult_OxGamePlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required .GameMessage.OxGameResult.OxType diceType = 2;
  if (has_dicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dicetype(), target);
  }

  // required int32 winResult = 3;
  if (has_winresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->winresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OxGameResult_OxGamePlayerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required .GameMessage.OxGameResult.OxType diceType = 2;
    if (has_dicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dicetype());
    }

    // required int32 winResult = 3;
    if (has_winresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxGameResult_OxGamePlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OxGameResult_OxGamePlayerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OxGameResult_OxGamePlayerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OxGameResult_OxGamePlayerResult::MergeFrom(const OxGameResult_OxGamePlayerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_dicetype()) {
      set_dicetype(from.dicetype());
    }
    if (from.has_winresult()) {
      set_winresult(from.winresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OxGameResult_OxGamePlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxGameResult_OxGamePlayerResult::CopyFrom(const OxGameResult_OxGamePlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxGameResult_OxGamePlayerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void OxGameResult_OxGamePlayerResult::Swap(OxGameResult_OxGamePlayerResult* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(dicetype_, other->dicetype_);
    std::swap(winresult_, other->winresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OxGameResult_OxGamePlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxGameResult_OxGamePlayerResult_descriptor_;
  metadata.reflection = OxGameResult_OxGamePlayerResult_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OxGameResult::kUserIdFieldNumber;
const int OxGameResult::kResultFieldNumber;
#endif  // !_MSC_VER

OxGameResult::OxGameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OxGameResult::InitAsDefaultInstance() {
}

OxGameResult::OxGameResult(const OxGameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OxGameResult::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OxGameResult::~OxGameResult() {
  SharedDtor();
}

void OxGameResult::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void OxGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OxGameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OxGameResult_descriptor_;
}

const OxGameResult& OxGameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameMessage_2eproto();
  return *default_instance_;
}

OxGameResult* OxGameResult::default_instance_ = NULL;

OxGameResult* OxGameResult::New() const {
  return new OxGameResult;
}

void OxGameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OxGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OxGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OxGameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OxGameResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  // repeated .GameMessage.OxGameResult.OxGamePlayerResult result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OxGameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OxGameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OxGameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OxGameResult::MergeFrom(const OxGameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OxGameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OxGameResult::CopyFrom(const OxGameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OxGameResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void OxGameResult::Swap(OxGameResult* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OxGameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OxGameResult_descriptor_;
  metadata.reflection = OxGameResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameMessage

// @@protoc_insertion_point(global_scope)
